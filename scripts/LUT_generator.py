#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# File         : LUT_generation.py
# Author       : francescourbani
# Created      : Thu May 10 07:36:29 CEST 2018
# Last update  : 
# Description  : Script for VHDL design LUT




import os
import sys
import numpy as np
from pylab import *

import time
import getpass

PATH = "../src/"

user_ = getpass.getuser()
####now_ = time.ctime() # current time in this format: "Fri Apr 13 16:21:38 2018"
now_ = time.ctime()[:20] + time.tzname[1] + " " + time.ctime()[20:]


def show_plot(x, M):
	plot(x, color="red", label="$x$")
	# y = x+2**M
	
	# plot(y, color="blue", label="$x+2^M$")
	grid(True)
	legend()
	show()



def main():
	print ("*"*10)
	print ("DDFS VHDL LUT generation")
	print ("*"*10)

	print ("\nWARNING\nYou are might be going to overwrite your LUT.vhd file. ^C to quit.\n")

	N_FW = int(input('Frequency Word width: '))

	while N_FW<1: # N IS 12 IN OUR CASE
		print ("WARNING: Insert positive integer")
		N_FW = int(input('Frequency Word width: '))

	N_YQ = int(input('Output Quantized width: '))
	while N_YQ<1: # 6 for us. from -32 to 31 i.e. [-2**5, 2**5-1] 
	              # we then kill -32 to make it balanced. from -31 to 31.
		print ("WARNING: Insert positive integer")
		N_YQ = int(input('Output Quantized width: '))
	    
	SG_UN = input('LUT type (signed | unsigned) SG|UN: ').upper()
	while SG_UN!="SG" and SG_UN!="UN": # for signed or unsigned
		print ("WARNING: BAD choice")
		SG_UN = input('LUT type SG|UN: ')


	N_LUT_line = 2**N_FW # 2**12
	# least significant bit
	lsb = 1/(2**(N_YQ-1)-1) # anyway balanced



	print ("-"*40)
	print ("N_FW  : " + str(N_FW))
	print ("lines : " + str(N_LUT_line))
	print ("N_YQ  : " + str(N_YQ))
	print ("SG_UN : " + SG_UN)
	print ("lsb   : " + str(lsb))


	x = np.array(range(N_LUT_line)) # creates a np.array of N_LUT_line elements. E.g.: N_LUT_line=4 => x=[0, 1, 2, 3]
	        
	for a in range(N_LUT_line):
		x[a] = np.floor((np.sin(2*np.pi*a/N_LUT_line))/lsb)
	    
	show_plot(x, N_YQ)


	fname = "LUT_DDFS_" + SG_UN + "_" + str(N_LUT_line) + "x" + str(N_YQ)


	# start to write the file
	out_file = open(PATH + fname + ".vhd", "w")


	templ = "\
---------------------------------------------\n\
-- Title       : " + fname + "\n\
-- Project     : DDFS\n\
---------------------------------------------\n\
-- File        : " + fname + ".vhd\n\
-- Language    : VHDL\n\
-- Author(s)   : " + user_ + "\n\
-- Company     : \n\
-- Created     : " + now_ + "\n\
---------------------------------------------\n\
-- Description : LUT for DDFS\n\
--        N_FW : " + str(N_FW) + "\n\
--       lines : " + str(N_LUT_line) + "\n\
--        N_YQ : " + str(N_YQ) + "\n\
--       SG_UN : " + SG_UN + "\n\
--         lsb : " + str(lsb) + "\n\
---------------------------------------------\n\
\n\
\n\
\n\
-- THIS FILE IS AUTOGENERATED BY LUT_generator.py\n\
-- WARNING! All changes made in this file might be lost!\n\
\n\
\n\
library ieee;\n\
use ieee.std_logic_1164.all;\n\
-- use ieee.std_logic_unsigned.all;\n\
use ieee.numeric_std.all;\n\
\n\
\n\
\n\
"


	out_file.write(templ)

	out_file.write("entity LUT_DDFS is\n")
	out_file.write("\tport (\n")
	out_file.write("\t\tLUT_line : in  std_logic_vector(" + str(N_FW-1) + " downto 0);\n")
	out_file.write("\t\tLUT_data : out std_logic_vector(" + str(N_YQ-1) + " downto 0) \n")
	out_file.write("\t);\n")
	out_file.write("end LUT_DDFS;\n") 
	out_file.write("\n")
	out_file.write("architecture rtl of LUT_DDFS is\n")
	out_file.write("\ttype LUT_t is array (natural range 0 to " +str(N_LUT_line-1) + ") of integer;\n")
	out_file.write("\tconstant LUT: LUT_t := (\n")

	for a in range(N_LUT_line):
		
		if SG_UN == "UN":
			x[a] += 2**(N_YQ-1)-1;
	        
		if a<(N_LUT_line-1):
			out_file.write("\t\t" + str(a) + " => " + str(int(x[a])) +",\n")
		else:
			out_file.write("\t\t" + str(a) + " => " + str(int(x[a])) +"\n")

	out_file.write(");\n")
	out_file.write("\n")
	out_file.write("begin\n")


	if SG_UN == "UN":
		out_file.write("\tLUT_data <= std_logic_vector(TO_UNSIGNED(LUT(TO_INTEGER(unsigned(LUT_line))), " + str(N_YQ) + "));\n")
	else:
		out_file.write("\tLUT_data <= std_logic_vector(TO_SIGNED(LUT(TO_INTEGER(unsigned(LUT_line))), " + str(N_YQ) + "));\n")

	out_file.write("end rtl;\n")

	out_file.close()

	print ()
	print (fname + " was successufully created.")

main()

