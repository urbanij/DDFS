#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# File         : LUT_generation.py
# Author       : francescourbani
# Created      : Thu May 10 07:36:29 CEST 2018
# Last update  : 
# Description  : Script for Verilog design LUT




import os
import sys
import numpy as np

import time
import getpass



user_ = getpass.getuser()
####now_ = time.ctime() # current time in this format: "Fri Apr 13 16:21:38 2018"
now_ = time.ctime()[:20] + time.tzname[1] + " " + time.ctime()[20:]



def main():
    print ("*"*10)
    print ("DDFS Verilog LUT generation")
    print ("*"*10)

    print ("\nWARNING\nYou are might be going to overwrite your LUT.vhd file. ^C to quit.\n")

    N_FW = int(input('Frequency Word width: '))

    while N_FW<1: # N IS 12 IN OUR CASE
        print ("WARNING: Insert positive integer")
        N_FW = int(input('Frequency Word width: '))

    N_YQ = int(input('Output Quantized width: '))
    while N_YQ<1: # 6 for us. from -32 to 31 i.e. [-2**5, 2**5-1] 
                  # we then kill -32 to make it balanced. from -31 to 31.
        print ("WARNING: Insert positive integer")
        N_YQ = int(input('Output Quantized width: '))
        
    SG_UN = input('LUT type (signed | unsigned) SG|UN: ').upper()
    while SG_UN!="SG" and SG_UN!="UN": # for signed or unsigned
        print ("WARNING: BAD choice")
        SG_UN = input('LUT type SG|UN: ')


    N_LUT_line = 2**N_FW # 2**12
    # least significant bit
    lsb = 1/(2**(N_YQ-1)-1) # anyway balanced



    print ("-"*40)
    print ("N_FW  : " + str(N_FW))
    print ("lines : " + str(N_LUT_line))
    print ("N_YQ  : " + str(N_YQ))
    print ("SG_UN : " + SG_UN)
    print ("lsb   : " + str(lsb))


    x = np.array(range(N_LUT_line)) # creates a np.array of N_LUT_line elements. E.g.: N_LUT_line=4 => x=[0, 1, 2, 3]
            
    for a in range(N_LUT_line):
        x[a] = np.floor((np.sin(2*np.pi*a/N_LUT_line))/lsb)
        


    fname = "lut_ddfs" # + "_" + SG_UN.lower() + "_" + str(N_LUT_line) + "x" + str(N_YQ)


    # start to write the file
    # out_file = open(fname + ".v", "w")


    templ = """//////////////////////////////////////////////
// Project Name:     DDFS verilog
//                   
// Group:            
// Author(s):        Francesco Urbani
// 
// Create Date:      """ + now_ + """
// Design Name: 
// Module Name:      """ + fname + """
// Target Devices:   Intel MAX10 10M50DAF484C7G
// Tool versions: 
// Description:      
//
// THIS FILE IS AUTOGENERATED BY LUT_generator.py
// WARNING! All changes made in this file might be lost!
//
// Revision:
//////////////////////////////////////////////


module """ + fname + """
#(
    parameter      N = """ + str(N_FW) + """,
    parameter      M = """ + str(N_YQ) + """
)
(
    input wire   [N-1:0]     lut_line,
    output reg   [M-1:0]     lut_data
);
    

always @ (*) 
begin
    case (lut_line)

"""


    for a in range(N_LUT_line):
        
        if SG_UN == "UN":
            x[a] += 2**(N_YQ-1)-1;
            
        
        templ += "\t\t" + str(a) + " : lut_data = " + str(int(x[a])) +";\n"
    
    
    templ += """
     endcase

end
endmodule
    """

    with open(fname + ".v", "w") as f:
        f.write(templ)


    print ()
    print (fname + " was successufully created.")

main()

